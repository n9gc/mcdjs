"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var child_process = require("child_process");
var fs = require("fs");
var fsp = require("fs/promises");
var func2code_1 = require("func2code");
var path = require("path");
var scpoProce = require("scpo-proce");
var types_1 = require("./types");
var schema2class = require("schema2class");
var factory = schema2class(types_1.configSchema);
function arr2obj(arr) {
    var obj = {};
    arr.forEach(function (e) { return obj[e] = 0; });
    return obj;
}
function rainbow(text, conf, color) {
    if (color === void 0) { color = null; }
    if (!conf.disp)
        return;
    if (typeof color === 'number')
        console.log("+-------------------\n| \u001B[".concat(color, "m ").concat(text, " \u001B[0m"));
    else if (typeof conf.disp === 'boolean' ? conf.disp : conf.disp.stat)
        console.log("| ".concat(text));
}
function allFunc(list, callback) {
    var qObj = arr2obj(list);
    var i = list.length;
    return function (n) { return n in qObj ? (--i, delete qObj[n], i || callback(), true) : false; };
}
function proce() {
    var list = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        list[_i] = arguments[_i];
    }
    return scpoProce.snake(list).trap(function (n) {
        var errs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            errs[_i - 1] = arguments[_i];
        }
        console.error.apply(console, __spreadArray(["| \u001B[31m".concat(n, "\u001B[0m")], errs, false));
        return n;
    });
}
function fork(files, todo, ordo, conf) {
    if (typeof conf.disp === 'boolean' ? conf.disp : conf.disp.path)
        files.forEach(function (e) { return rainbow("\u001B[4m\u001B[34m".concat(path.normalize(testsDir + e), "\u001B[0m"), conf); });
    child_process.fork(testsDir + files[0], conf.disp ? void 0 : {
        stdio: 'overlapped',
    }).on('close', function (num) { return num ? ordo('RE', Error("Exit code is ".concat(num))) : todo(); });
}
function getOut(type, ext) {
    return function (str, n) { return fsp.writeFile("".concat(testsDir, "/test.").concat(ext), n[type] + str); };
}
function out(list, str, n) {
    var _this = this;
    var fin = {};
    return scpoProce.snake(list.map(function (e) { return outMap[e]; }).map(function (e) {
        return function (todo) { return __awaiter(_this, void 0, void 0, function () { var _a; var _b; return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!(e in fin)) return [3 /*break*/, 1];
                    _a = todo();
                    return [3 /*break*/, 3];
                case 1:
                    fin[e] = 0;
                    return [4 /*yield*/, ((_b = outObj[e]) === null || _b === void 0 ? void 0 : _b.call(outObj, str, n))];
                case 2:
                    _a = (_c.sent(), todo());
                    _c.label = 3;
                case 3: return [2 /*return*/, _a];
            }
        }); }); };
    }));
}
function waitCli(todo, proc) {
    return setTimeout(function () { return (todo(Error('Cli not respond')), proc.kill()); }, 5000);
}
var testsDir = path.join(__dirname, '../runtime');
var outMap = {
    'ts': 'ts',
    'webpack-cjs': 'cjs',
    'webpack-esm': 'esm',
    'node-cjs': 'cjs',
    'node-esm': 'esm',
};
var outObj = {
    esm: getOut('esm', 'm.js'),
    cjs: getOut('cjs', 'c.js'),
    ts: getOut('ts', 'ts'),
};
var doObj = {
    ts: function (conf) {
        rainbow('TS', conf, 44);
        var ts = conf.cfg.ts;
        var timer;
        var cmd = 'tsc';
        return proce(function (todo) {
            child_process.exec("".concat(cmd, " -v"), todo);
            rainbow('Testing cli', conf);
        }, function (todo, ordo, err) {
            if (!err)
                return todo(err);
            cmd = "npx ".concat(cmd);
            var proc = child_process.exec("".concat(cmd, " -v"), todo);
            timer = waitCli(todo, proc);
            rainbow('Testing npx cli', conf);
        }, function (todo, ordo, err, so, se) {
            if (err)
                return ordo('Have you installed "tsc" ?', err, so, se);
            clearTimeout(timer);
            rainbow('Compiling', conf);
            child_process.exec("".concat(cmd, " ").concat(ts.path ? "-p ".concat(ts.path) : '', " ").concat(testsDir, "/test.ts ").concat(ts.cmd || ''), todo);
        }, function (todo, ordo, err, so, se) {
            if (err)
                return ordo('Compilation failed.', err, so, se);
            fork(['/test.js', '/test.ts'], todo, ordo, conf);
        });
    },
    node: function (conf, n) {
        return proce(function (todo) {
            rainbow('Copying test file', conf);
            fs.cp("".concat(testsDir, "/test.").concat(n, ".js"), "".concat(testsDir, "/node.").concat(n, "js"), todo);
        }, function (todo, ordo) {
            fork(["/node.".concat(n, "js")], todo, ordo, conf);
        });
    },
    'node-esm': function (conf) {
        rainbow('Node ESM', conf, 45);
        return doObj.node(conf, 'm');
    },
    'node-cjs': function (conf) {
        rainbow('Node CJS', conf, 43);
        return doObj.node(conf, 'c');
    },
    webpack: function (conf, n) {
        var wp = conf.cfg.webpack;
        var cfg = "".concat(testsDir, "/webpack.config.js");
        var timer;
        var cmd = 'webpack';
        return proce(function (todo) {
            child_process.exec("".concat(cmd, " -h"), todo);
            rainbow('Testing cli', conf);
        }, function (todo, ordo, err) {
            if (!err)
                return todo(err);
            cmd = "npx ".concat(cmd);
            var proc = child_process.exec("".concat(cmd, " -h"), todo);
            timer = waitCli(todo, proc);
            rainbow('Testing npx cli', conf);
        }, function (todo, ordo, err, so, se) {
            if (err)
                return ordo('Have you installed "webpack" ?', err, so, se);
            clearTimeout(timer);
            rainbow('Copying configs', conf);
            if (wp.path)
                fs.cp(wp.path, cfg, todo);
            else
                fs.writeFile(cfg, '', todo);
        }, function (todo, ordo, err) {
            if (err)
                return ordo('Cannot copy the config JS file.', err);
            rainbow('Modifying configs', conf);
            fs.writeFile(cfg, "\n\t\t\t\t\t;\n\t\t\t\t\tmodule || (module = {});\n\t\t\t\t\tmodule.exports  || (module.exports = {});\n\t\t\t\t\tmodule.exports.output  || (module.exports.output = {});\n\t\t\t\t\tmodule.exports.output.path = __dirname;\n\t\t\t\t\tmodule.exports.output.filename = 'webpack.".concat(n, ".js';\n\t\t\t\t\tmodule.exports.mode || (module.exports.mode = 'development');\n\t\t\t\t\tmodule.exports.entry = __dirname + '/test.").concat(n, ".js';\n\t\t\t\t"), { flag: 'a' }, todo);
        }, function (todo, ordo, err) {
            if (err)
                return ordo('Cannot modify the config JS file.', err);
            rainbow('Compiling', conf);
            child_process.exec("".concat(cmd, " ").concat(wp.cmd || '', " -c ").concat(testsDir, "/webpack.config.js"), todo);
        }, function (todo, ordo, err, so, se) {
            if (err)
                return ordo('Compilation failed.', err, so, se);
            fork(["/webpack.".concat(n, ".js"), "/test.".concat(n, ".js")], todo, ordo, conf);
        });
    },
    'webpack-esm': function (conf) {
        rainbow('webpack ESM', conf, 42);
        return doObj.webpack(conf, 'm');
    },
    'webpack-cjs': function (conf) {
        rainbow('webpack CJS', conf, 46);
        return doObj.webpack(conf, 'c');
    },
};
function checkDir() {
    return scpoProce.snake(function (todo) { return fs.access(testsDir, fs.constants.F_OK, todo); }, function (todo, ordo, err) { return err ? fs.mkdir(testsDir, todo) : todo(); });
}
function test(n, tests) {
    return __awaiter(this, void 0, void 0, function () {
        var conf, findPath, cjs, esm, ts, str, i, detail, err;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, clear()];
                case 1:
                    _a.sent();
                    conf = factory(n);
                    findPath = JSON.stringify(conf.pack || './' + path.relative(testsDir, conf.file));
                    cjs = {
                        all: "var ".concat(conf.sign, " = require(").concat(findPath, ");"),
                        def: "var ".concat(conf.sign, " = require(").concat(findPath, ")[\"default\"];"),
                    }[conf.mode.imp];
                    esm = {
                        all: "import * as ".concat(conf.sign, " from ").concat(findPath, ";"),
                        def: "import ".concat(conf.sign, " from ").concat(findPath, ";"),
                    }[conf.mode.imp];
                    ts = (conf.cfg.ts.noChk
                        ? '//@ts-nocheck\n'
                        : '') + {
                        all: "import * as ".concat(conf.sign, " from ").concat(findPath, ";"),
                        def: "import ".concat(conf.sign, " from ").concat(findPath, ";"),
                        cjs: "import ".concat(conf.sign, " = require(").concat(findPath, ");"),
                    }[conf.cfg.ts.cjsMod ? 'cjs' : conf.mode.imp];
                    str = '\nfunction log(...params) { console.log("| ", ...params) }\n';
                    for (i in tests)
                        str += ''
                            + "console.log('|\\n+-\\x1b[32m".concat(JSON.stringify(i), ":\\x1b[0m');")
                            + "(function(){\n\n"
                            + func2code_1.default.getInnerCode(tests[i])
                            + "\n\n})();";
                    str += 'console.log("|");';
                    return [4 /*yield*/, out(conf.req, str, { cjs: cjs, esm: esm, ts: ts, })];
                case 2:
                    _a.sent();
                    detail = {};
                    err = 0;
                    return [4 /*yield*/, scpoProce.snake(conf.req.map(function (e) { return function (todo) { return __awaiter(_this, void 0, void 0, function () {
                            var info;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!(e in doObj)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, doObj[e](conf)];
                                    case 1:
                                        info = _a.sent();
                                        info && (detail[e] = info, err++);
                                        return [3 /*break*/, 3];
                                    case 2:
                                        detail[e] = 'No such testing enviroument';
                                        err++;
                                        _a.label = 3;
                                    case 3:
                                        todo();
                                        return [2 /*return*/];
                                }
                            });
                        }); }; }))];
                case 3:
                    _a.sent();
                    return [2 /*return*/, { err: err, detail: detail }];
            }
        });
    });
}
function clear() {
    return __awaiter(this, void 0, void 0, function () {
        var list;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, checkDir()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, fsp.readdir(testsDir)];
                case 2:
                    list = _a.sent();
                    return [4 /*yield*/, scpoProce.snake(list.map(function (e) { return function (todo) { return fs.unlink("".concat(testsDir, "/").concat(e), todo); }; }))];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
test.clear = clear;
test.test = test;
module.exports = test;
//# sourceMappingURL=index.js.map