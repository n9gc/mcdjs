import type { OfSchema } from 'accurtype';
export type InConfig = OfSchema<typeof configSchema>;
export declare const configSchema: {
    readonly $schema: "http://json-schema.org/draft-07/schema";
    readonly type: "object";
    readonly properties: {
        readonly disp: {
            readonly type: readonly ["object", "boolean"];
            readonly properties: {
                readonly path: {
                    readonly type: "boolean";
                    readonly default: true;
                };
                readonly stat: {
                    readonly type: "boolean";
                    readonly default: true;
                };
            };
            readonly default: true;
        };
        readonly req: {
            readonly type: "array";
            readonly items: {
                readonly type: "string";
                readonly enum: readonly ["ts", "node-esm", "node-cjs", "webpack-esm", "webpack-cjs"];
            };
            readonly default: readonly ["ts", "node-esm", "node-cjs", "webpack-esm", "webpack-cjs"];
        };
        readonly mode: {
            readonly type: "object";
            readonly properties: {
                readonly imp: {
                    readonly type: "string";
                    readonly enum: readonly ["all", "def"];
                    readonly default: "all";
                };
            };
        };
        readonly cfg: {
            readonly type: "object";
            readonly properties: {
                readonly ts: {
                    readonly type: "object";
                    readonly properties: {
                        readonly path: {
                            readonly type: "string";
                            readonly default: "";
                        };
                        readonly cmd: {
                            readonly type: "string";
                            readonly default: "";
                        };
                        readonly cjsMod: {
                            readonly type: "boolean";
                            readonly default: false;
                        };
                        readonly noChk: {
                            readonly type: "boolean";
                            readonly default: true;
                        };
                    };
                };
                readonly webpack: {
                    readonly type: "object";
                    readonly properties: {
                        readonly path: {
                            readonly type: "string";
                            readonly default: "";
                        };
                        readonly cmd: {
                            readonly type: "string";
                            readonly default: "";
                        };
                    };
                };
            };
        };
        readonly sign: {
            readonly type: "string";
            readonly default: "a";
        };
        readonly file: {
            readonly type: "string";
            readonly default: null;
        };
        readonly pack: {
            readonly type: "string";
            readonly default: "";
        };
    };
};
