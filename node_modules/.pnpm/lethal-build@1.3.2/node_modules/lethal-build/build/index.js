"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var child_process = require("child_process");
var events = require("events");
var fs = require("fs");
var fsp = require("fs/promises");
var path = require("path");
require("promise-snake");
var readline = require("readline");
var you_can_too_1 = require("you-can-too");
var cbArgs = you_can_too_1.default.callback.cbArgs;
/**
 * Lethal Build
 * @version 1.3.2
 * @license GPL-3.0-or-later
 * @link https://github.com/E0SelmY4V/lethal-build
 */
function initer(dir) {
    return initer.OpnList[dir] || (initer.OpnList[dir] = new initer.Opn(dir));
}
(function (initer) {
    initer.OpnList = {};
    initer.isRegExp = function (n) { return 'flags' in n; };
    initer.ignoreList = ['node_modules'];
    initer.isAbs = path.sep === '/'
        ? function (fname) { return fname[0] === '/'; }
        : function (fname) { return fname[1] === ':'; };
    initer.noSep = function (fname) { return fname.slice(0, fname.at(-1) === '/' || fname.at(-1) === '\\' ? -1 : void 0); };
    initer.rep = 'replaceAll' in String.prototype
        ? function (n, f, t) { return n.replaceAll(f, t); }
        : function (n, f, t) { return n.split(f).join(t); };
    initer.reps = function (n, f, t) { return f.length ? initer.reps(initer.rep(n, f.pop(), t.pop()), f, t) : n; };
    initer.regSign = '+*?[]^()-.${}|,:=!<\\'.split('');
    initer.goodReg = function (text) { return initer.reps(text, initer.regSign.slice(), initer.regSign.map(function (n) { return "\\".concat(n); })); };
    var Opn = /** @class */ (function () {
        function Opn(dir) {
            var _this = this;
            this.comp = function (fname) { return initer.isAbs(fname) ? path.normalize(fname) : fname ? path.join(_this.dir, initer.noSep(fname)) : _this.dir; };
            this.compWill = function (fname) { return __awaiter(_this, void 0, void 0, function () { var _a; return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.comp;
                        return [4 /*yield*/, fname];
                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];
                }
            }); }); };
            this.file2reg = function (fname) { return RegExp("^".concat(initer.goodReg(_this.comp(fname)), "([\\/\\\\].*$|$)")); };
            this.goodReg = initer.goodReg;
            this.cmtMem = {};
            this.cmt = function (cmtFile, br) {
                if (br === void 0) { br = '\n'; }
                return __awaiter(_this, void 0, void 0, function () {
                    var file, _a, cmtArr, cb, inter;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _a = this.comp;
                                return [4 /*yield*/, cmtFile];
                            case 1:
                                file = _a.apply(this, [_b.sent()]);
                                if (file in this.cmtMem)
                                    return [2 /*return*/, this.cmtMem[file]];
                                cmtArr = [];
                                cb = function (input) { return input[0] === ' ' || input[0] === '/' ? cmtArr.push(input) : (inter.removeAllListeners('line'), cmtArr.push('')); };
                                inter = readline.createInterface(fs.createReadStream(file)).on('line', cb);
                                return [4 /*yield*/, events.once(inter, 'close')];
                            case 2:
                                _b.sent();
                                return [2 /*return*/, this.cmtMem[file] = cmtArr.join(br)];
                        }
                    });
                });
            };
            this.walk = function (dir, matched) {
                if (dir === void 0) { dir = _this.dir; }
                if (matched === void 0) { matched = []; }
                return __awaiter(_this, void 0, void 0, function () {
                    var files, _a, _b;
                    var _this = this;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _b = (_a = fsp).readdir;
                                return [4 /*yield*/, dir];
                            case 1: return [4 /*yield*/, _b.apply(_a, [_c.sent()])];
                            case 2:
                                files = _c.sent();
                                return [4 /*yield*/, Promise.thens(files.map(function (filename) { return function () { return __awaiter(_this, void 0, void 0, function () {
                                        var filepath, _a, _b, _c;
                                        return __generator(this, function (_d) {
                                            switch (_d.label) {
                                                case 0:
                                                    if (initer.ignoreList.includes(filename))
                                                        return [2 /*return*/];
                                                    _b = (_a = path).join;
                                                    return [4 /*yield*/, dir];
                                                case 1:
                                                    filepath = _b.apply(_a, [_d.sent(), filename]);
                                                    return [4 /*yield*/, fsp.stat(filepath)];
                                                case 2:
                                                    if (!(_d.sent()).isDirectory()) return [3 /*break*/, 4];
                                                    return [4 /*yield*/, this.walk(filepath, matched)];
                                                case 3:
                                                    _c = _d.sent();
                                                    return [3 /*break*/, 6];
                                                case 4: return [4 /*yield*/, matched];
                                                case 5:
                                                    _c = (_d.sent()).push(filepath);
                                                    _d.label = 6;
                                                case 6:
                                                    _c;
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); }; }))];
                            case 3:
                                _c.sent();
                                return [2 /*return*/, matched];
                        }
                    });
                });
            };
            this.sigMatch = function (regos, dir) { return __awaiter(_this, void 0, void 0, function () {
                var allFile, _a, files, reg;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(dir instanceof Array)) return [3 /*break*/, 1];
                            _a = dir;
                            return [3 /*break*/, 3];
                        case 1: return [4 /*yield*/, this.walk(dir)];
                        case 2:
                            _a = _b.sent();
                            _b.label = 3;
                        case 3:
                            allFile = _a;
                            files = [];
                            reg = typeof regos === 'string' ? this.file2reg(regos) : regos;
                            return [4 /*yield*/, Promise.thens(allFile.map(function (file) { return function () { return __awaiter(_this, void 0, void 0, function () { var _a, _b, _c, _d, _e; return __generator(this, function (_f) {
                                    switch (_f.label) {
                                        case 0:
                                            _c = (_b = reg).test;
                                            return [4 /*yield*/, file];
                                        case 1:
                                            _a = _c.apply(_b, [_f.sent()]);
                                            if (!_a) return [3 /*break*/, 3];
                                            _e = (_d = files).push;
                                            return [4 /*yield*/, file];
                                        case 2:
                                            _a = _e.apply(_d, [_f.sent()]);
                                            _f.label = 3;
                                        case 3: return [2 /*return*/, _a];
                                    }
                                }); }); }; }))];
                        case 4:
                            _b.sent();
                            return [2 /*return*/, files];
                    }
                });
            }); };
            this.match = function (regsWill, dir) {
                if (dir === void 0) { dir = _this.dir; }
                return __awaiter(_this, void 0, void 0, function () {
                    var regs, files_1, allFile_1;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, regsWill];
                            case 1:
                                regs = _a.sent();
                                if (!(regs instanceof Array)) return [3 /*break*/, 4];
                                files_1 = [];
                                return [4 /*yield*/, this.walk(dir)];
                            case 2:
                                allFile_1 = _a.sent();
                                return [4 /*yield*/, Promise.thens(regs.map(function (n) { return function () { return __awaiter(_this, void 0, void 0, function () { var _a, _b, _c, _d; return __generator(this, function (_e) {
                                        switch (_e.label) {
                                            case 0:
                                                _b = (_a = files_1.push).apply;
                                                _c = [files_1];
                                                _d = this.sigMatch;
                                                return [4 /*yield*/, n];
                                            case 1: return [4 /*yield*/, _d.apply(this, [_e.sent(), allFile_1])];
                                            case 2: return [2 /*return*/, _b.apply(_a, _c.concat([_e.sent()]))];
                                        }
                                    }); }); }; }))];
                            case 3:
                                _a.sent();
                                return [2 /*return*/, files_1];
                            case 4: return [2 /*return*/, this.sigMatch(regs, dir)];
                        }
                    });
                });
            };
            this.mergeOut = function (files, out) { return function () { return __awaiter(_this, void 0, void 0, function () {
                var _a, _b;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _b = (_a = Promise).snake;
                            return [4 /*yield*/, this.match(files)];
                        case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).map(function (file) { return function (res) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                    return [2 /*return*/, fs.createReadStream(file).on('end', res).pipe(out, { end: false })];
                                }); }); }; })]).then(function () { return out.end(); })];
                    }
                });
            }); }; };
            this.tempFileId = -1;
            this.outFS = function (infosWill, outWill) { return function () { return __awaiter(_this, void 0, void 0, function () {
                var _a, infos, out, _b, files, temps, outs;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, infosWill];
                        case 1:
                            _b = [_c.sent()];
                            return [4 /*yield*/, outWill];
                        case 2:
                            _a = _b.concat([_c.sent()]), infos = _a[0], out = _a[1];
                            files = [];
                            temps = [];
                            outs = typeof out === 'string' ? fs.createWriteStream(this.comp(out)) : out;
                            return [4 /*yield*/, Promise.thens(infos.map(function (_a) {
                                    var out = _a[0], info = _a[1];
                                    return function () { return __awaiter(_this, void 0, void 0, function () {
                                        var fname, _a, _b, _c, _d, _e, _f;
                                        return __generator(this, function (_g) {
                                            switch (_g.label) {
                                                case 0:
                                                    if (!out) return [3 /*break*/, 3];
                                                    fname = "".concat(this.dir, "/temp").concat(++this.tempFileId);
                                                    files.push(fname);
                                                    temps.push(fname);
                                                    _b = (_a = fsp).writeFile;
                                                    _c = [fname];
                                                    return [4 /*yield*/, info];
                                                case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([_g.sent()]))];
                                                case 2:
                                                    _g.sent();
                                                    return [3 /*break*/, 5];
                                                case 3:
                                                    _e = (_d = files).push;
                                                    _f = this.comp;
                                                    return [4 /*yield*/, info];
                                                case 4:
                                                    _e.apply(_d, [_f.apply(this, [_g.sent()])]);
                                                    _g.label = 5;
                                                case 5: return [2 /*return*/];
                                            }
                                        });
                                    }); };
                                }))];
                        case 3:
                            _c.sent();
                            return [4 /*yield*/, this.mergeOut(files, outs)()];
                        case 4:
                            _c.sent();
                            return [4 /*yield*/, this.dels(temps)()];
                        case 5:
                            _c.sent();
                            return [2 /*return*/];
                    }
                });
            }); }; };
            this.cps = function (opns) { return function () { return __awaiter(_this, void 0, void 0, function () {
                var _a, _b;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _b = (_a = Promise).thens;
                            return [4 /*yield*/, opns];
                        case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).map(function (nWill) { return function () { return __awaiter(_this, void 0, void 0, function () {
                                    var n, _a, _b, _c, _d, _e;
                                    return __generator(this, function (_f) {
                                        switch (_f.label) {
                                            case 0: return [4 /*yield*/, nWill];
                                            case 1:
                                                n = _f.sent();
                                                if (!(typeof n === 'string')) return [3 /*break*/, 3];
                                                return [4 /*yield*/, opns];
                                            case 2: throw _f.sent();
                                            case 3:
                                                _b = (_a = fsp).cp;
                                                _c = this.comp;
                                                return [4 /*yield*/, n[0]];
                                            case 4:
                                                _d = [_c.apply(this, [_f.sent()])];
                                                _e = this.comp;
                                                return [4 /*yield*/, n[1]];
                                            case 5: return [4 /*yield*/, _b.apply(_a, _d.concat([_e.apply(this, [_f.sent()]), { recursive: true }]))];
                                            case 6:
                                                _f.sent();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); }; })]).catch(function (_a) {
                                var a = _a[0], b = _a[1];
                                return __awaiter(_this, void 0, void 0, function () { var _b, _c, _d, _e, _f; return __generator(this, function (_g) {
                                    switch (_g.label) {
                                        case 0:
                                            _c = (_b = fsp).cp;
                                            _d = this.comp;
                                            return [4 /*yield*/, a];
                                        case 1:
                                            _e = [_d.apply(this, [_g.sent()])];
                                            _f = this.comp;
                                            return [4 /*yield*/, b];
                                        case 2: return [2 /*return*/, _c.apply(_b, _e.concat([_f.apply(this, [_g.sent()]), { recursive: true }]))];
                                    }
                                }); });
                            })];
                    }
                });
            }); }; };
            this.dels = function (files) { return function () { return __awaiter(_this, void 0, void 0, function () {
                var _a, _b;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _b = (_a = Promise).thens;
                            return [4 /*yield*/, this.match(files)];
                        case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).map(function (file) { return function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, fsp.unlink(this.comp(file))];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                }); }); }; })])];
                    }
                });
            }); }; };
            this.mvs = function (opnsWill) { return function () { return __awaiter(_this, void 0, void 0, function () {
                var mayStr, opns, dos;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.cps(opnsWill)()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, opnsWill];
                        case 2: return [4 /*yield*/, (_a.sent())[0]];
                        case 3:
                            mayStr = _a.sent();
                            if (typeof mayStr === 'string')
                                return [2 /*return*/, this.dels(mayStr)()];
                            return [4 /*yield*/, opnsWill];
                        case 4:
                            opns = _a.sent();
                            dos = [];
                            return [4 /*yield*/, Promise.thens(opns.map(function (opn) { return function () { return __awaiter(_this, void 0, void 0, function () { var _a, _b; return __generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            _b = (_a = dos).push;
                                            return [4 /*yield*/, opn];
                                        case 1: return [4 /*yield*/, (_c.sent())[0]];
                                        case 2: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                                    }
                                }); }); }; }))];
                        case 5:
                            _a.sent();
                            return [4 /*yield*/, this.dels(dos)()];
                        case 6:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); }; };
            this.mkdir = function (dir) { return function () { return __awaiter(_this, void 0, void 0, function () {
                var adir, dirs;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, dir];
                        case 1:
                            adir = _a.sent();
                            dirs = typeof adir === 'string' ? [adir] : adir;
                            return [4 /*yield*/, Promise.thens(dirs.map(function (n) { return function () { return __awaiter(_this, void 0, void 0, function () { var _a, _b; return __generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            _b = (_a = fsp).mkdir;
                                            return [4 /*yield*/, n];
                                        case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(), { recursive: true }])];
                                    }
                                }); }); }; }))];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); }; };
            this.exec = function (cmd) { return function () { return new Promise(function (todo, ordo) { return __awaiter(_this, void 0, void 0, function () { var _a, _b; return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = child_process).exec;
                        return [4 /*yield*/, cmd];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(), cbArgs(function (out, err) { return (console.log(out), console.log(err)); }, todo, ordo)])];
                }
            }); }); }); }; };
            this.judge = function () {
                var values = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    values[_i] = arguments[_i];
                }
                return function () {
                    return Promise.snake(values.map(function (valueWill) { return function (res) { return __awaiter(_this, void 0, void 0, function () {
                        var value;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, valueWill];
                                case 1:
                                    value = _a.sent();
                                    if (typeof (value) === 'boolean' ? value : value())
                                        res();
                                    return [2 /*return*/];
                            }
                        });
                    }); }; }));
                };
            };
            this.snake = function () {
                var opns = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    opns[_i] = arguments[_i];
                }
                return Promise.thens(opns.map(function (opn) { return function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, opn];
                        case 1: return [4 /*yield*/, (_a.sent())()];
                        case 2: return [2 /*return*/, _a.sent()];
                    }
                }); }); }; }));
            };
            this.log = function () {
                var msgWill = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    msgWill[_i] = arguments[_i];
                }
                return function () { return __awaiter(_this, void 0, void 0, function () {
                    var msgs;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                msgs = [];
                                return [4 /*yield*/, Promise.thens(msgWill.map(function (msg) { return function () { return __awaiter(_this, void 0, void 0, function () { var _a, _b; return __generator(this, function (_c) {
                                        switch (_c.label) {
                                            case 0:
                                                _b = (_a = msgs).push;
                                                return [4 /*yield*/, msg];
                                            case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                                        }
                                    }); }); }; }))];
                            case 1:
                                _a.sent();
                                console.log.apply(console, msgs);
                                return [2 /*return*/];
                        }
                    });
                }); };
            };
            this.tempTimeId = 0;
            this.tempList = ['fromInit'];
            this.tempLast = 'fromInit';
            this.timeStarts = {};
            this.timeCallbacks = {};
            this.timePromises = {};
            this.getHrtime = function (timeArr) {
                if (timeArr === void 0) { timeArr = process.hrtime(); }
                return timeArr[0] * 1000 + timeArr[1] / 1000000;
            };
            this.timeStart = function (name, timeArr) {
                if (name === void 0) { name = null; }
                if (timeArr === void 0) { timeArr = void 0; }
                if (typeof name !== 'string')
                    _this.tempList.push(name = "".concat(_this.tempTimeId++));
                var n = name;
                return function () { return (_this.timeStarts[n] = _this.getHrtime(timeArr),
                    Promise.resolve()); };
            };
            this.timeEnd = function (name) {
                if (name === void 0) { name = null; }
                if (typeof name !== 'string')
                    _this.tempLast = name = _this.tempList.pop() || 'fromInit';
                var n = name;
                return function () { return (_this.timeCallbacks[n](_this.getHrtime() - _this.timeStarts[n]),
                    Promise.resolve()); };
            };
            this.time = function (name) {
                if (name === void 0) { name = _this.tempLast; }
                return _this.timePromises[name] = new Promise(function (res) { return _this.timeCallbacks[name] = res; });
            };
            this.initer = initer;
            this.timeStart('fromInit')();
            this.dir = dir;
            process.chdir(dir);
        }
        Object.defineProperty(Opn.prototype, "ignoreList", {
            get: function () {
                return initer.ignoreList;
            },
            set: function (n) {
                initer.ignoreList.length = 0;
                n.forEach(function (file) { return initer.ignoreList.push(file); });
            },
            enumerable: false,
            configurable: true
        });
        return Opn;
    }());
    initer.Opn = Opn;
    ;
})(initer || (initer = {}));
initer.default = initer;
module.exports = initer;
