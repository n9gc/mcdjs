
// Bundle of types from "backfill-config" and packages it references.
// This file was generated by dts-bundle-generator and packages/lage/scripts/update-dts-bundle.js

import { Readable } from 'stream';

declare const logLevelsObject: {
	silly: number;
	verbose: number;
	info: number;
	warn: number;
	error: number;
	mute: number;
};
declare type LogLevel = keyof typeof logLevelsObject;
declare type ConsoleLogger = {
	silly(...args: string[]): void;
	verbose(...args: string[]): void;
	info(...args: string[]): void;
	warn(...args: string[]): void;
	error(...args: string[]): void;
};
declare type Times = "hashTime" | "buildTime" | "putTime" | "fetchTime";
declare type Logger = ConsoleLogger & {
	setName(name: string): void;
	setHash(hash: string): void;
	setCacheProvider(cacheProvider: string): void;
	setHit(hit: boolean): void;
	setTime(type: Times): {
		stop(): void;
	};
	setMode(mode: string, logLevel: "verbose" | "info"): void;
	setHashOfOutput(hash: string): void;
	toFile(logFolder: string): Promise<void>;
	pipeProcessOutput(stdout: Readable | null, stderr: Readable | null): void;
};
export interface ICacheStorage {
	fetch: (hash: string) => Promise<boolean>;
	put: (hash: string, filesToCache: string[]) => Promise<void>;
}
export declare type AzureBlobCacheStorageOptions = {
	connectionString: string;
	container: string;
	maxSize?: number;
};
export declare type NpmCacheStorageOptions = {
	npmPackageName: string;
	registryUrl: string;
	npmrcUserconfig?: string;
};
export declare type AzureBlobCacheStorageConfig = {
	provider: "azure-blob";
	options: AzureBlobCacheStorageOptions;
};
export declare type NpmCacheStorageConfig = {
	provider: "npm";
	options: NpmCacheStorageOptions;
};
export declare type CustomStorageConfig = {
	provider: (logger: Logger, cwd: string) => ICacheStorage;
	name?: string;
};
export declare type CacheStorageConfig = {
	provider: "local";
} | {
	provider: "local-skip";
} | NpmCacheStorageConfig | AzureBlobCacheStorageConfig | CustomStorageConfig;
export declare function getNpmConfigFromSerializedOptions(options: string, logger: Logger): NpmCacheStorageConfig;
export declare function getAzureBlobConfigFromSerializedOptions(options: string, logger: Logger): AzureBlobCacheStorageConfig;
export declare function getEnvConfig(logger: Logger): Partial<Config>;
export declare type HashGlobs = string[];
export declare const modesObject: {
	READ_ONLY: string;
	WRITE_ONLY: string;
	READ_WRITE: string;
	PASS: string;
};
export declare type BackfillModes = keyof typeof modesObject;
export declare type Config = {
	cacheStorageConfig: CacheStorageConfig;
	clearOutput: boolean;
	internalCacheFolder: string;
	logFolder: string;
	logLevel: LogLevel;
	name: string;
	mode: BackfillModes;
	outputGlob: string[];
	packageRoot: string;
	performanceReportName?: string;
	producePerformanceLogs: boolean;
	validateOutput: boolean;
	incrementalCaching: boolean;
};
export declare function isCorrectMode(mode: string): mode is BackfillModes;
export declare function getName(packageRoot: string): any;
export declare function getSearchPaths(fromPath: string): string[];
export declare function createDefaultConfig(fromPath: string): Config;
export declare function createConfig(logger: Logger, fromPath: string): Config;

export {};
