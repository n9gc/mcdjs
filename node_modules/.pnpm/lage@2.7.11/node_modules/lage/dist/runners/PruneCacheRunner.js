"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "PruneCacheRunner", {
    enumerable: true,
    get: function() {
        return PruneCacheRunner;
    }
});
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _promises = require("fs/promises");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const MS_IN_A_DAY = 1000 * 60 * 60 * 24;
class PruneCacheRunner {
    async shouldRun() {
        return true;
    }
    async run(runOptions) {
        const { target  } = runOptions;
        const { clearPaths , prunePeriod , now  } = target.options;
        for (const cachePath of clearPaths){
            if (_fs.default.existsSync(cachePath)) {
                const entries = _fs.default.readdirSync(cachePath);
                for (const entry of entries){
                    const entryPath = _path.default.join(cachePath, entry);
                    const entryStat = await (0, _promises.stat)(entryPath);
                    if (now - entryStat.mtime.getTime() > prunePeriod * MS_IN_A_DAY) {
                        await removeCacheEntry(entryPath, entryStat);
                    }
                }
            }
        }
    }
}
async function removeCacheEntry(entryPath, entryStat) {
    if (entryStat.isDirectory()) {
        return (0, _promises.rm)(entryPath, {
            recursive: true
        });
    } else {
        return (0, _promises.unlink)(entryPath);
    }
}
