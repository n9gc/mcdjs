"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WorkerRunner", {
    enumerable: true,
    get: function() {
        return WorkerRunner;
    }
});
const _url = require("url");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
class WorkerRunner {
    async shouldRun(target) {
        const scriptModule = await this.getScriptModule(target);
        if (typeof scriptModule.shouldRun === "function") {
            return await scriptModule.shouldRun(target);
        }
        return true;
    }
    async run(runOptions) {
        const { target , weight , abortSignal  } = runOptions;
        const { taskArgs  } = this.options;
        const scriptModule = await this.getScriptModule(target);
        const runFn = typeof scriptModule.run === "function" ? scriptModule.run : typeof scriptModule.default === "function" ? scriptModule.default : scriptModule;
        if (typeof runFn !== "function") {
            throw new Error("WorkerRunner: worker script must export a function; you likely need to use `module.exports = function() {...}`");
        }
        return await runFn({
            target,
            weight,
            taskArgs,
            abortSignal
        });
    }
    async getScriptModule(target) {
        const scriptFile = target.options?.worker ?? target.options?.script;
        if (!scriptFile) {
            throw new Error('WorkerRunner: "script" configuration is required - e.g. { type: "worker", script: "./worker.js" }');
        }
        let importScript = scriptFile;
        if (!importScript.startsWith("file://")) {
            importScript = (0, _url.pathToFileURL)(importScript).toString();
        }
        return await import(importScript);
    }
    constructor(options){
        _define_property(this, "options", void 0);
        this.options = options;
    }
}
_define_property(WorkerRunner, "gracefulKillTimeout", 2500);
