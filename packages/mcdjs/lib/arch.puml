@startuml
title "McdJS 架构图"
folder "源  代  码  文  件" {
	file code_A
	file code_B
	file code_C
	file code_D
}
package "Operator 操  作  器  模  块" {
	entity operm_A
	entity operm_B
	entity operm_C
	entity operm_D
}
code_A --> operm_A
code_B --> operm_B
code_C --> operm_C
code_D --> operm_D
frame GlobalThis {
	entity API_A
	entity API_B
	entity API_C
	entity API_D
	API_C .> API_D
	API_B .> API_C
	API_A .> API_B : 顺  序  执  行 >
}
operm_A *--> API_A
operm_B *--> API_B
operm_C *--> API_C
operm_D *--> API_D
package IR {
	entity magAST_A
	entity magAST_B
	entity magAST_C
	entity magAST_D
}
API_A --> magAST_A
API_B --> magAST_B
API_C --> magAST_C
API_D --> magAST_D
component "Transf 转  译  模  块" {
	portin " " as TrasfIn_A
	portin " " as TrasfIn_B
	portin " " as TrasfIn_C
	portin " " as TrasfIn_D
	portout " " as TrasfOut_A
	portout " " as TrasfOut_B
	portout " " as TrasfOut_C
	portout " " as TrasfOut_D
}
magAST_A --> TrasfIn_A
magAST_B --> TrasfIn_B
magAST_C --> TrasfIn_C
magAST_D --> TrasfIn_D
component "Generate 生  成  模  块" {
	portin " " as GenerateIn_A
	portin " " as GenerateIn_B
	portin " " as GenerateIn_C
	portin " " as GenerateIn_D
	portout " " as GenerateOut_A
	portout " " as GenerateOut_B
	portout " " as GenerateOut_C
	portout " " as GenerateOut_D
}
TrasfOut_A --> GenerateIn_A
TrasfOut_B --> GenerateIn_B
TrasfOut_C --> GenerateIn_C
TrasfOut_D --> GenerateIn_D
folder "生  成  的  结  果" {
	package Generated_A {
		file command_A
	}
	package Generated_B {
		file command_B
	}
	package Generated_C {
		file command_C
	}
	package Generated_D {
		file command_D
	}
}
GenerateOut_A --> Generated_A
GenerateOut_B --> Generated_B
GenerateOut_C --> Generated_C
GenerateOut_D --> Generated_D
@enduml